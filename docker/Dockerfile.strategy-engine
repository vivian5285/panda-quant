FROM node:18-slim AS builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install TypeScript globally
RUN npm install -g typescript

# Copy package files first to leverage Docker cache
COPY strategy-engine/package*.json ./
COPY strategy-engine/tsconfig.json ./

# Install all dependencies
RUN npm install --legacy-peer-deps && \
    npm install --save-dev \
    @types/express@4.17.17 \
    @types/jsonwebtoken@9.0.0 \
    @types/jest@29.5.0 \
    @types/node@20.5.0 \
    @types/uuid@9.0.0 \
    @types/winston@2.4.4 \
    jest@29.5.0 \
    ts-jest@29.1.0 \
    ts-node-dev@2.0.0 \
    typescript@5.2.2

# Set permissions for TypeScript
RUN chmod -R 777 /usr/local/bin/tsc

# Copy source code
COPY strategy-engine/ ./

# Add type checking script to package.json
RUN npm pkg set scripts.type-check="tsc --noEmit"

# Run type checking
RUN npm run type-check

# Build the application and verify build output
RUN npm run build && \
    if [ ! -d "/app/dist" ]; then \
        echo "Build failed: dist directory not found" && \
        exit 1; \
    fi && \
    if [ ! -d "/app/node_modules" ]; then \
        echo "Build failed: node_modules directory not found" && \
        exit 1; \
    fi && \
    ls -la /app/dist && \
    ls -la /app/node_modules

# Production stage
FROM node:18-slim

WORKDIR /app

# Install curl for healthcheck
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Copy built files from builder and verify
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules

# Verify copied files
RUN if [ ! -d "/app/dist" ]; then \
        echo "Failed to copy dist directory" && \
        exit 1; \
    fi && \
    if [ ! -d "/app/node_modules" ]; then \
        echo "Failed to copy node_modules directory" && \
        exit 1; \
    fi && \
    ls -la /app/dist && \
    ls -la /app/node_modules

# Expose the application port
EXPOSE 3006

# Add health check
HEALTHCHECK --interval=30s --timeout=3s \
  CMD curl -f http://localhost:3006/health || exit 1

# Start the application
CMD ["npm", "start"] 