FROM node:18-slim AS builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install TypeScript globally
RUN npm install -g typescript

# Copy package files first to leverage Docker cache
COPY strategy-engine/package*.json ./
COPY strategy-engine/tsconfig.json ./

# Install dependencies
RUN npm install --legacy-peer-deps && \
    npm install --save-dev \
    @types/node \
    @typescript-eslint/eslint-plugin \
    @typescript-eslint/parser \
    eslint \
    eslint-config-prettier \
    eslint-plugin-prettier \
    prettier \
    ts-node \
    typescript \
    @types/redis@4.0.11

# Install production dependencies
RUN npm install --save \
    axios \
    dotenv \
    express \
    winston \
    redis

# Set permissions for TypeScript
RUN chmod -R 777 /usr/local/bin/tsc

# Copy source code
COPY strategy-engine/ ./

# Add type checking script to package.json
RUN npm pkg set scripts.type-check="tsc --noEmit"

# Run type checking
RUN npm run type-check

# Build the application and verify build output
RUN npm run build && \
    ls -la /app/dist || (echo "Build failed: dist directory not found" && exit 1)

# Production stage
FROM node:18-slim

WORKDIR /app

# Install curl for healthcheck
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Copy built files from builder
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules

# Verify copied files
RUN ls -la /app/dist && \
    ls -la /app/node_modules || (echo "Failed to copy build artifacts" && exit 1)

# Expose the application port
EXPOSE 3006

# Add health check
HEALTHCHECK --interval=30s --timeout=3s \
  CMD curl -f http://localhost:3006/health || exit 1

# Start the application
CMD ["npm", "start"] 