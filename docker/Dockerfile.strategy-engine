FROM node:18-slim AS builder

# 设置工作目录
WORKDIR /app

# 配置国内镜像源
RUN echo "deb http://mirrors.aliyun.com/debian/ bookworm main non-free non-free-firmware contrib" > /etc/apt/sources.list && \
    echo "deb http://mirrors.aliyun.com/debian-security/ bookworm-security main" >> /etc/apt/sources.list && \
    echo "deb http://mirrors.aliyun.com/debian/ bookworm-updates main" >> /etc/apt/sources.list

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 设置 npm 配置
RUN npm config set registry https://registry.npmjs.org/

# 复制 package.json 和 package-lock.json
COPY strategy-engine/package.json strategy-engine/package-lock.json ./

# 安装项目依赖
RUN npm install --legacy-peer-deps --no-audit && \
    npm install --save-dev \
        @types/cors \
        @types/helmet \
        @types/morgan \
        @types/node \
        @types/express \
        @types/jsonwebtoken \
        @types/jest \
        @types/uuid \
        @types/winston \
        @types/mongoose \
        @types/express-session \
        @types/connect-redis \
        typescript@5.3.3

# 安装全局 TypeScript
RUN npm install -g typescript@5.3.3

# 安装运行时依赖
RUN npm install --save \
    cors \
    helmet \
    morgan \
    dotenv \
    express-session \
    connect-redis

# 创建必要的目录结构
RUN mkdir -p src/types src/controllers src/models src/routes src/middleware src/config src/utils

# 创建类型定义文件
RUN echo 'import { Document } from "mongoose";\n\
import { Schema } from "mongoose";\n\
\n\
export interface IUser extends Document {\n\
  _id: string;\n\
  username: string;\n\
  email: string;\n\
  password: string;\n\
  name: string;\n\
  balance: number;\n\
  role: string;\n\
  status: string;\n\
  createdAt: Date;\n\
  updatedAt: Date;\n\
}\n\
\n\
export interface IStrategy extends Document {\n\
  _id: string;\n\
  userId: string;\n\
  name: string;\n\
  description: string;\n\
  code: string;\n\
  status: string;\n\
  createdAt: Date;\n\
  updatedAt: Date;\n\
}\n\
\n\
export interface IOrder extends Document {\n\
  _id: string;\n\
  strategyId: string;\n\
  type: string;\n\
  symbol: string;\n\
  quantity: number;\n\
  price: number;\n\
  status: string;\n\
  createdAt: Date;\n\
}\n\
\n\
export interface ICommission extends Document {\n\
  _id: string;\n\
  orderId: string;\n\
  amount: number;\n\
  currency: string;\n\
  createdAt: Date;\n\
}\n\
\n\
export interface IAlert extends Document {\n\
  _id: string;\n\
  userId: string;\n\
  type: string;\n\
  message: string;\n\
  timestamp: Date;\n\
}\n\
\n\
export interface IBlacklistEntry extends Document {\n\
  _id: string;\n\
  type: string;\n\
  address: string;\n\
  reason: string;\n\
  createdAt: Date;\n\
}\n\
\n\
export interface INetworkStatus extends Document {\n\
  _id: string;\n\
  type: string;\n\
  network: string;\n\
  status: string;\n\
  lastChecked: Date;\n\
}\n\
\n\
export interface IStrategyPerformance extends Document {\n\
  _id: string;\n\
  strategyId: string;\n\
  metrics: {\n\
    totalReturn: number;\n\
    sharpeRatio: number;\n\
    maxDrawdown: number;\n\
    winRate: number;\n\
  };\n\
  period: {\n\
    start: Date;\n\
    end: Date;\n\
  };\n\
  createdAt: Date;\n\
}' > src/types/index.ts

# 创建基本的入口文件
RUN echo 'import express from "express";\n\
import mongoose from "mongoose";\n\
import cors from "cors";\n\
import helmet from "helmet";\n\
import morgan from "morgan";\n\
import { config } from "./config";\n\
\n\
const app = express();\n\
\n\
// 中间件\n\
app.use(cors());\n\
app.use(helmet());\n\
app.use(morgan("dev"));\n\
app.use(express.json());\n\
app.use(express.urlencoded({ extended: true }));\n\
\n\
// 健康检查\n\
app.get("/health", (req, res) => {\n\
  res.status(200).json({ status: "ok" });\n\
});\n\
\n\
// 启动服务器\n\
const PORT = process.env.PORT || 5000;\n\
app.listen(PORT, () => {\n\
  console.log(`Server is running on port ${PORT}`);\n\
});\n\
\n\
export default app;' > src/index.ts

# 创建配置文件
RUN echo 'import dotenv from "dotenv";\n\
\n\
// 加载环境变量\n\
dotenv.config();\n\
\n\
export const config = {\n\
  port: process.env.PORT || 5000,\n\
  mongoUri: process.env.MONGO_URI || "mongodb://mongo:27017/strategy",\n\
  redisUri: process.env.REDIS_URI || "redis://redis:6379",\n\
  jwtSecret: process.env.JWT_SECRET || "your-secret-key",\n\
  jwtExpiresIn: process.env.JWT_EXPIRES_IN || "1d"\n\
};' > src/config/index.ts

# 创建 .env 文件
RUN echo 'PORT=5000\n\
MONGO_URI=mongodb://mongo:27017/strategy\n\
REDIS_URI=redis://redis:6379\n\
JWT_SECRET=your-secret-key\n\
JWT_EXPIRES_IN=1d' > .env

# 创建 tsconfig.json
RUN echo '{\n\
  "compilerOptions": {\n\
    "target": "es2018",\n\
    "module": "commonjs",\n\
    "lib": ["es2018", "esnext.asynciterable"],\n\
    "skipLibCheck": true,\n\
    "sourceMap": true,\n\
    "outDir": "./dist",\n\
    "moduleResolution": "node",\n\
    "removeComments": true,\n\
    "noImplicitAny": false,\n\
    "strictNullChecks": false,\n\
    "strictFunctionTypes": false,\n\
    "noImplicitThis": false,\n\
    "noUnusedLocals": false,\n\
    "noUnusedParameters": false,\n\
    "noImplicitReturns": false,\n\
    "noFallthroughCasesInSwitch": false,\n\
    "allowSyntheticDefaultImports": true,\n\
    "esModuleInterop": true,\n\
    "emitDecoratorMetadata": true,\n\
    "experimentalDecorators": true,\n\
    "resolveJsonModule": true,\n\
    "baseUrl": ".",\n\
    "paths": {\n\
      "@/*": ["src/*"]\n\
    }\n\
  },\n\
  "exclude": ["node_modules", "dist"],\n\
  "include": ["src/**/*.ts", "src/**/*.tsx"]\n\
}' > tsconfig.json

# 复制源代码
COPY strategy-engine/. .

# 设置目录权限
RUN chown -R node:node /app

# 修改 package.json 中的构建脚本
RUN npm pkg set scripts.build="tsc --skipLibCheck"

# 切换到非root用户
USER node

# 构建应用
RUN echo "构建应用..." && \
    npm run build

# 生产环境
FROM node:18-slim

# 设置工作目录
WORKDIR /app

# 安装 curl 用于健康检查
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# 复制构建产物
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# 设置目录权限
RUN chown -R node:node /app

# 切换到非root用户
USER node

# 暴露端口
EXPOSE 5000

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s \
  CMD curl -f http://localhost:5000/health || exit 1

# 启动命令
CMD ["node", "dist/index.js"] 