FROM node:18-slim AS builder

# 添加构建参数
ARG NODE_ENV=production
ARG SKIP_TYPE_CHECK=false

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install TypeScript globally
RUN npm install -g typescript@5.3.3 && \
    chmod -R 777 /usr/local/bin/tsc

# Copy package files first to leverage Docker cache
COPY server/package*.json ./
COPY server/tsconfig.json ./

# Install all dependencies
RUN npm config set registry https://registry.npmjs.org/ && \
    npm install --legacy-peer-deps

# Copy source code
COPY server/ ./src/

# Set proper permissions
RUN chmod -R 777 /app

# 根据参数决定是否跳过类型检查
RUN if [ "$SKIP_TYPE_CHECK" = "true" ]; then \
    echo "跳过类型检查" && \
    npm run build; \
    else \
    echo "执行类型检查" && \
    npm run type-check && \
    npm run build; \
    fi

# Production stage
FROM node:18-slim

WORKDIR /app

# Install curl for healthcheck
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Copy built files from builder
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules

# Set proper permissions
RUN chmod -R 777 /app

# Expose the application port
EXPOSE 3005

# Add health check
HEALTHCHECK --interval=30s --timeout=3s \
  CMD curl -f http://localhost:3005/health || exit 1

# Start the application
CMD ["npm", "start"] 