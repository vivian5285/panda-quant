FROM node:18-slim AS builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install TypeScript globally
RUN npm install -g typescript@5.3.3

# Copy package files first to leverage Docker cache
COPY server/package*.json ./
COPY server/tsconfig.json ./

# Install all dependencies including type definitions
RUN npm install --legacy-peer-deps && \
    npm install --save-dev @types/redis@4.6.13 && \
    npm cache clean --force

# Copy source code and other necessary files
COPY server/ ./

# Add type checking script to package.json
RUN npm pkg set scripts.type-check="tsc --noEmit"

# Run type checking
RUN npm run type-check

# Build the application
RUN npm run build

# Production stage
FROM node:18-slim

WORKDIR /app

# Install curl for healthcheck
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Install production dependencies only
COPY server/package*.json ./
RUN npm install --production --legacy-peer-deps && \
    npm cache clean --force

# Copy built files from builder
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules

# Copy necessary configuration files
COPY server/.env* ./
COPY server/knexfile.ts ./

# Create necessary directories and set permissions
RUN mkdir -p /app/logs && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose the application port
EXPOSE 3005

# Add health check
HEALTHCHECK --interval=30s --timeout=3s \
  CMD curl -f http://localhost:3005/health || exit 1

# Start the application
CMD ["npm", "start"] 