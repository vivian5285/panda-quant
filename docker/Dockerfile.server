FROM node:18-slim AS builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install TypeScript globally
RUN npm install -g typescript@5.3.3

# Copy package files first to leverage Docker cache
COPY server/package*.json ./

# Install all dependencies
RUN npm install --legacy-peer-deps

# Install additional type definitions
RUN npm install --save-dev \
    @types/node@20.11.19 \
    @typescript-eslint/eslint-plugin@7.0.1 \
    @typescript-eslint/parser@7.0.1 \
    eslint@8.56.0 \
    eslint-config-prettier@9.1.0 \
    eslint-plugin-prettier@5.1.3 \
    prettier@3.2.5 \
    ts-node@10.9.2 \
    typescript@5.3.3 \
    @types/pg@8.11.14 \
    @types/socket.io@3.0.1 \
    @types/redis@4.0.11 \
    @types/ws@8.5.10 \
    @types/cors@2.8.17 \
    @types/express@4.17.21 \
    @types/mongoose@5.11.97 \
    @types/jest@29.5.12

# Copy source code
COPY server/ ./

# Add type checking script to package.json
RUN npm pkg set scripts.type-check="tsc --noEmit"

# Run type checking
RUN npm run type-check || true

# Build the application
RUN npm run build

# Production stage
FROM node:18-slim

WORKDIR /app

# Install production dependencies only
COPY server/package*.json ./
RUN npm install --production --legacy-peer-deps

# Copy built files from builder
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules

# Create necessary directories
RUN mkdir -p /app/logs

# Set proper permissions
RUN chown -R node:node /app

# Switch to non-root user
USER node

# Expose the application port
EXPOSE 3005

# Add health check
HEALTHCHECK --interval=30s --timeout=3s \
  CMD curl -f http://localhost:3005/health || exit 1

# Start the application
CMD ["npm", "start"] 