# 使用 Node.js 18 作为基础镜像
FROM node:18-slim AS builder

# 设置工作目录
WORKDIR /app

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 设置 npm 配置
RUN npm config set registry https://registry.npmmirror.com/

# 复制 package.json 和 package-lock.json
COPY package.json package-lock.json ./

# 安装项目依赖
RUN npm install --legacy-peer-deps --no-audit

# 安装 esbuild
RUN npm install esbuild@0.25.3

# 复制源代码
COPY . .

# 设置目录权限
RUN chown -R node:node /app && \
    chmod -R 755 /app && \
    chmod -R +x /app/node_modules/.bin

# 切换到非root用户
USER node

# 构建应用
RUN npm run build

# 使用 nginx 作为生产环境
FROM nginx:alpine

# 复制构建产物到 nginx 目录
COPY --from=builder /app/dist /usr/share/nginx/html

# 创建 nginx 配置
RUN echo 'server { listen 80; server_name localhost; root /usr/share/nginx/html; index index.html index.htm; gzip on; gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; add_header X-Frame-Options "SAMEORIGIN"; add_header X-XSS-Protection "1; mode=block"; add_header X-Content-Type-Options "nosniff"; location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ { expires 1y; add_header Cache-Control "public, no-transform"; } location / { try_files $uri $uri/ /index.html; } location /api { proxy_pass http://admin-api:3000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection "upgrade"; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; } error_page 404 /index.html; error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } }' > /etc/nginx/conf.d/default.conf

# 暴露端口
EXPOSE 80

# 启动 nginx
CMD ["nginx", "-g", "daemon off;"] 