# 使用 Node.js 18 作为基础镜像
FROM node:18 AS builder

# 设置工作目录
WORKDIR /app

# 配置国内镜像源
RUN echo "deb http://mirrors.aliyun.com/debian/ bookworm main non-free non-free-firmware contrib" > /etc/apt/sources.list && \
    echo "deb http://mirrors.aliyun.com/debian-security/ bookworm-security main" >> /etc/apt/sources.list && \
    echo "deb http://mirrors.aliyun.com/debian/ bookworm-updates main" >> /etc/apt/sources.list

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# 设置 npm 配置
RUN npm config set registry https://registry.npmmirror.com/

# 复制 package.json 和 package-lock.json
COPY admin-ui/package.json admin-ui/package-lock.json ./

# 安装项目依赖
RUN npm install --legacy-peer-deps --no-audit

# 安装 TypeScript 和 Vite
RUN npm install -g typescript@5.3.3 vite@5.0.8

# 复制源代码
COPY admin-ui/src ./src
COPY admin-ui/public ./public
COPY admin-ui/index.html ./
COPY admin-ui/tsconfig.json ./
COPY admin-ui/tsconfig.node.json ./
COPY admin-ui/vite.config.ts ./

# 设置目录权限
RUN chown -R node:node /app && \
    chmod -R 755 /app && \
    chmod -R +x /app/node_modules/.bin

# 切换到非root用户
USER node

# 构建应用
RUN npm run build

# 使用 nginx 作为生产环境
FROM nginx:alpine

# 安装 wget 用于健康检查
RUN apk add --no-cache wget

# 复制构建产物到 nginx 目录
COPY --from=builder /app/dist /usr/share/nginx/html

# 复制 nginx 配置
COPY docker/nginx/admin-ui.nginx.conf /etc/nginx/conf.d/default.conf

# 设置目录权限
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# 暴露端口
EXPOSE 80

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s \
  CMD wget -q --spider http://localhost:80/health || exit 1

# 启动 nginx
CMD ["nginx", "-g", "daemon off;"] 