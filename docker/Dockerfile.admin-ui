# 构建阶段
FROM node:18-alpine AS builder

# 设置工作目录
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Copy package files first to leverage Docker cache
COPY package*.json ./

# Install dependencies
RUN npm install && \
    npm install -g typescript@5.3.3 vite && \
    chmod -R 777 /usr/local/bin/tsc && \
    chmod -R 777 /usr/local/bin/vite && \
    chmod -R 777 /app/node_modules/.bin

# Copy source code
COPY . .

# Set permissions for the entire app directory
RUN chmod -R 777 /app

# Build the application
RUN npm run build

# 生产阶段
FROM nginx:alpine

# Install wget for healthcheck
RUN apk add --no-cache wget

# Create non-root user
RUN groupadd -r nginxuser && useradd -r -g nginxuser nginxuser

# Copy built files from builder
COPY --from=builder /app/dist /usr/share/nginx/html

# Configure Nginx
RUN echo 'server { \
    listen 8081; \
    server_name localhost; \
    \
    location / { \
        root /usr/share/nginx/html; \
        try_files $uri $uri/ /index.html; \
    } \
    \
    location /api { \
        proxy_pass http://admin-api:3001; \
        proxy_http_version 1.1; \
        proxy_set_header Upgrade $http_upgrade; \
        proxy_set_header Connection "upgrade"; \
        proxy_set_header Host $host; \
        proxy_cache_bypass $http_upgrade; \
    } \
}' > /etc/nginx/conf.d/default.conf

# Set permissions for Nginx files
RUN chown -R nginxuser:nginxuser /usr/share/nginx/html && \
    chmod -R 777 /usr/share/nginx/html

# Switch to non-root user
USER nginxuser

# Expose the application port
EXPOSE 8081

# Add health check
HEALTHCHECK --interval=30s --timeout=3s \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8081/ || exit 1

# Start Nginx
CMD ["nginx", "-g", "daemon off;"] 