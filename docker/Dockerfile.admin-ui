# 使用 Node.js 18 作为基础镜像
FROM node:18-slim AS builder

# 设置工作目录
WORKDIR /app

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 复制 package.json 和 package-lock.json
COPY package.json package-lock.json ./

# 安装项目依赖
RUN npm install --legacy-peer-deps --no-audit

# 安装TypeScript和Vite
RUN npm install -g typescript@5.3.3 && \
    npm install --save-dev vite @vitejs/plugin-react

# 安装 mongoose 类型声明
RUN npm install --save-dev @types/mongoose mongoose

# 创建类型定义文件
RUN mkdir -p src/types && \
    echo 'import { Document } from "mongoose";\n\
import { Schema } from "mongoose";\n\
\n\
export interface IUser extends Document {\n\
  _id: string;\n\
  username: string;\n\
  email: string;\n\
  password: string;\n\
  name: string;\n\
  balance: number;\n\
  role: string;\n\
  status: string;\n\
  createdAt: Date;\n\
  updatedAt: Date;\n\
}\n\
\n\
export interface AuthUser {\n\
  _id: string;\n\
  username: string;\n\
  email: string;\n\
  role: string;\n\
}\n\
\n\
export interface AuthRequest extends Request {\n\
  user?: AuthUser;\n\
}' > src/types/index.ts

# 创建 tsconfig.json
RUN echo '{\n\
  "compilerOptions": {\n\
    "target": "es2018",\n\
    "module": "commonjs",\n\
    "lib": ["es2018", "esnext.asynciterable"],\n\
    "skipLibCheck": true,\n\
    "sourceMap": true,\n\
    "outDir": "./dist",\n\
    "moduleResolution": "node",\n\
    "removeComments": true,\n\
    "noImplicitAny": false,\n\
    "strictNullChecks": false,\n\
    "strictFunctionTypes": false,\n\
    "noImplicitThis": false,\n\
    "noUnusedLocals": false,\n\
    "noUnusedParameters": false,\n\
    "noImplicitReturns": false,\n\
    "noFallthroughCasesInSwitch": false,\n\
    "allowSyntheticDefaultImports": true,\n\
    "esModuleInterop": true,\n\
    "emitDecoratorMetadata": true,\n\
    "experimentalDecorators": true,\n\
    "resolveJsonModule": true,\n\
    "baseUrl": ".",\n\
    "paths": {\n\
      "@/*": ["src/*"]\n\
    }\n\
  },\n\
  "exclude": ["node_modules", "dist"],\n\
  "include": ["src/**/*.ts", "src/**/*.tsx"]\n\
}' > tsconfig.json

# 创建 vite.config.ts
RUN echo 'import { defineConfig } from "vite";\n\
import react from "@vitejs/plugin-react";\n\
import path from "path";\n\
\n\
export default defineConfig({\n\
  plugins: [react()],\n\
  resolve: {\n\
    alias: {\n\
      "@": path.resolve(__dirname, "./src"),\n\
    },\n\
  },\n\
  build: {\n\
    outDir: "dist",\n\
    assetsDir: "assets",\n\
    sourcemap: true,\n\
  },\n\
  server: {\n\
    port: 3000,\n\
    host: true,\n\
  },\n\
});' > vite.config.ts

# 复制源代码
COPY . .

# 确保所有文件属于当前用户
RUN chown -R node:node /app

# 切换到非root用户
USER node

# Build the app
RUN echo "构建应用..." && \
    npm run build

# 使用 nginx 作为生产环境
FROM nginx:alpine

# 复制构建产物到 nginx 目录
COPY --from=builder /app/dist /usr/share/nginx/html

# 复制 nginx 配置
COPY nginx.conf /etc/nginx/conf.d/default.conf

# 暴露端口
EXPOSE 80

# 启动 nginx
CMD ["nginx", "-g", "daemon off;"] 