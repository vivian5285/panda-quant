FROM node:18-slim AS builder

# 添加构建参数
ARG NODE_ENV=production
ARG SKIP_TYPE_CHECK=false

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install TypeScript globally
RUN npm install -g typescript@5.3.3 && \
    chmod -R 777 /usr/local/bin/tsc

# Create a non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Copy package files first to leverage Docker cache
COPY user-ui/package*.json ./
COPY user-ui/tsconfig.json ./

# Install all dependencies
RUN npm config set registry https://registry.npmjs.org/ && \
    npm install --legacy-peer-deps

# Copy source code
COPY user-ui/ ./src/

# Set proper permissions
RUN chown -R appuser:appuser /app && \
    chmod -R 777 /app && \
    chmod -R 777 /app/node_modules/.bin

# Switch to non-root user
USER appuser

# Set production environment
ENV NODE_ENV=production
ENV VITE_ENV=production

# 根据参数决定是否跳过类型检查
RUN if [ "$SKIP_TYPE_CHECK" = "true" ]; then \
    echo "跳过类型检查" && \
    npm run build; \
    else \
    echo "执行类型检查" && \
    npm run type-check && \
    npm run build; \
    fi

# Production stage
FROM nginx:alpine

# Install necessary packages
RUN apt-get update && apt-get install -y \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Create nginx user and group
RUN groupadd -r nginxuser && useradd -r -g nginxuser nginxuser

# Copy built files from builder
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY user-ui/nginx.conf /etc/nginx/conf.d/default.conf

# Set proper permissions
RUN chown -R nginxuser:nginxuser /usr/share/nginx/html && \
    chmod -R 777 /usr/share/nginx/html

# Switch to non-root user
USER nginxuser

# Expose the application port
EXPOSE 80

# Add health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"] 