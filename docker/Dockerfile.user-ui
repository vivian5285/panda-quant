# 使用完整版 Node.js 18 作为基础镜像
FROM node:18.20.2 as builder

# 使用 root 用户
USER root

# 设置工作目录
WORKDIR /app

# 设置构建参数
ARG NODE_ENV=production
ARG SKIP_TYPE_CHECK=true

# 安装必要的系统依赖
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    curl \
    git \
    build-essential \
    libc6-dev \
    libstdc++6 \
    libgcc1 \
    libc6 \
    libstdc++6 \
    libgcc1 \
    && rm -rf /var/lib/apt/lists/*

# 设置 npm 配置
RUN npm config set registry https://registry.npmjs.org/

# 全局安装 TypeScript
RUN npm install -g typescript@5.3.3 && \
    chmod -R 777 /usr/local/bin/tsc && \
    chmod -R 777 /usr/local/lib/node_modules/typescript

# 复制 package.json 和 package-lock.json
COPY package*.json ./

# 清理并重新安装依赖
RUN rm -rf node_modules package-lock.json && \
    npm cache clean --force && \
    npm install --legacy-peer-deps --no-audit && \
    npm install vite@5.1.4 --save-dev && \
    npm install rollup@3.29.4 --save-dev && \
    npm install @types/node@20.5.0 --save-dev --force && \
    npm install @emotion/react@11.11.3 --save && \
    npm install @emotion/styled@11.11.0 --save && \
    npm install @emotion/is-prop-valid@1.2.1 --save --force && \
    npm rebuild

# 复制源代码
COPY . .

# 设置目录权限
RUN chmod -R 777 /app

# 设置环境变量，跳过原生模块检查
ENV NODE_OPTIONS="--no-warnings"

# 直接执行构建，跳过类型检查
RUN echo "跳过类型检查，直接构建..." && \
    npm run build

# 使用 Nginx 作为生产环境的基础镜像
FROM nginx:alpine

# 使用 root 用户
USER root

# 复制构建产物到 Nginx 目录
COPY --from=builder /app/dist /usr/share/nginx/html

# 复制 Nginx 配置文件
COPY nginx.conf /etc/nginx/conf.d/default.conf

# 设置 Nginx 目录权限
RUN chmod -R 777 /usr/share/nginx/html && \
    chmod -R 777 /etc/nginx/conf.d

# 暴露 80 端口
EXPOSE 80

# 启动 Nginx
CMD ["nginx", "-g", "daemon off;"] 