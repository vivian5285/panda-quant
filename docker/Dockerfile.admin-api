# 使用 Node.js 18 作为基础镜像
FROM node:18-slim AS builder

# 使用 root 用户
USER root

# 设置工作目录
WORKDIR /app

# 配置国内镜像源
RUN echo "deb http://mirrors.aliyun.com/debian/ bookworm main non-free non-free-firmware contrib" > /etc/apt/sources.list && \
    echo "deb http://mirrors.aliyun.com/debian-security/ bookworm-security main" >> /etc/apt/sources.list && \
    echo "deb http://mirrors.aliyun.com/debian/ bookworm-updates main" >> /etc/apt/sources.list

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 安装全局依赖
RUN npm install -g typescript@5.3.3 && \
    chmod -R 777 /usr/local/bin && \
    chmod -R 777 /usr/local/lib/node_modules

# 设置 npm 配置
RUN npm config set registry https://registry.npmmirror.com/

# 复制 package.json 和 package-lock.json
COPY admin-api/package.json admin-api/package-lock.json ./

# 安装类型定义依赖
RUN npm install --save-dev @types/cors @types/helmet @types/morgan && \
    npm install --save helmet morgan

# 安装项目依赖
RUN npm install --legacy-peer-deps --no-audit

# 安装 bcrypt
RUN npm install bcrypt

# 复制源代码
COPY admin-api/ .

# 设置目录权限
RUN chown -R node:node /app && \
    chmod -R 755 /app

# 修改 package.json 中的构建脚本
RUN npm pkg set scripts.build="tsc --skipLibCheck"

# 构建应用
RUN echo "构建应用..." && \
    npm run build

# 生产阶段
FROM node:18-slim

# 使用 root 用户
USER root

# 设置工作目录
WORKDIR /app

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 设置 npm 配置
RUN npm config set registry https://registry.npmmirror.com/

# 复制构建产物
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/.env ./.env

# 重新安装 bcrypt
RUN npm install bcrypt

# 设置目录权限
RUN chown -R node:node /app

# 切换到非root用户
USER node

# 暴露端口
EXPOSE 3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s \
  CMD curl -f http://localhost:3000/health || exit 1

# 启动命令
CMD ["node", "dist/index.js"] 