import { Server } from 'socket.io';
import { Types } from 'mongoose';
import { WebSocket } from 'ws';
import { EventEmitter } from 'events';
import { INetworkStatus } from '../interfaces/INetworkStatus';
export declare class NetworkStatusService extends EventEmitter {
    private static instance;
    private statusMap;
    private wsConnections;
    private monitoringInterval;
    private wsServer;
    private clients;
    private io;
    private status;
    private model;
    private constructor();
    static getInstance(io?: Server): NetworkStatusService;
    private initializeNetworks;
    private startMonitoring;
    checkNetwork(network: string): Promise<void>;
    private performNetworkCheck;
    private broadcastStatus;
    getAllStatuses(): INetworkStatus[];
    getOverallStatus(): 'online' | 'offline';
    stopMonitoring(): void;
    private setupWebSocketServer;
    notifyNetworkStatus(userId: Types.ObjectId, status: 'online' | 'offline'): Promise<void>;
    setNetworkStatus(status: 'online' | 'offline'): void;
    getCurrentStatus(): 'online' | 'offline';
    private checkAllNetworks;
    updateStatus(network: string, status: Partial<INetworkStatus>): Promise<any>;
    handleError(network: string, error: any): Promise<any>;
    checkNetworkStatus(network: string): Promise<INetworkStatus>;
    addConnection(id: string, ws: WebSocket): void;
    removeConnection(id: string): void;
    updateNetworkStatus(data: Partial<INetworkStatus>): Promise<any>;
}
