import { ICommission, ICommissionRule, CommissionCreateInput, CommissionUpdateInput } from '../types/Commission';
import { CommissionType, CommissionStatus } from '../types/Enums';
export declare class CommissionService {
    private static instance;
    private constructor();
    static getInstance(): CommissionService;
    private convertToICommission;
    private convertToICommissionRule;
    createCommission(commissionData: CommissionCreateInput): Promise<ICommission>;
    getCommissionById(id: string): Promise<ICommission | null>;
    getCommissionByUserId(userId: string): Promise<ICommission | null>;
    updateCommission(id: string, updateData: CommissionUpdateInput): Promise<ICommission | null>;
    deleteCommission(id: string): Promise<boolean>;
    getCommissionsByUserId(userId: string): Promise<ICommission[]>;
    getCommissionsByStatus(status: CommissionStatus): Promise<ICommission[]>;
    getCommissionsByDateRange(startDate: Date, endDate: Date): Promise<ICommission[]>;
    getCommissionsByType(type: CommissionType): Promise<ICommission[]>;
    getCommissionsByUserAndDateRange(userId: string, startDate: Date, endDate: Date): Promise<ICommission[]>;
    getCommissionsByUserAndStatus(userId: string, status: CommissionStatus): Promise<ICommission[]>;
    getCommissionsByUserAndType(userId: string, type: CommissionType): Promise<ICommission[]>;
    getCommissionsByUserAndDateRangeAndStatus(userId: string, startDate: Date, endDate: Date, status: CommissionStatus): Promise<ICommission[]>;
    getCommissionsByUserAndDateRangeAndType(userId: string, startDate: Date, endDate: Date, type: CommissionType): Promise<ICommission[]>;
    getCommissionsByUserAndDateRangeAndStatusAndType(userId: string, startDate: Date, endDate: Date, status: CommissionStatus, type: CommissionType): Promise<ICommission[]>;
    getCommissionsByDateRangeAndStatus(startDate: Date, endDate: Date, status: CommissionStatus): Promise<ICommission[]>;
    getCommissionsByDateRangeAndType(startDate: Date, endDate: Date, type: CommissionType): Promise<ICommission[]>;
    getCommissionsByDateRangeAndStatusAndType(startDate: Date, endDate: Date, status: CommissionStatus, type: CommissionType): Promise<ICommission[]>;
    getCommissionsByStatusAndType(status: CommissionStatus, type: CommissionType): Promise<ICommission[]>;
    getCommissionsByUserAndStatusAndType(userId: string, status: CommissionStatus, type: CommissionType): Promise<ICommission[]>;
    getCommissionsByUserAndDateRangeAndStatusAndTypeAndAmount(userId: string, startDate: Date, endDate: Date, status: CommissionStatus, type: CommissionType, amount: number): Promise<ICommission[]>;
    getCommissionsByDateRangeAndStatusAndTypeAndAmount(startDate: Date, endDate: Date, status: CommissionStatus, type: CommissionType, amount: number): Promise<ICommission[]>;
    getCommissionsByStatusAndTypeAndAmount(status: CommissionStatus, type: CommissionType, amount: number): Promise<ICommission[]>;
    getCommissionsByUserAndStatusAndTypeAndAmount(userId: string, status: CommissionStatus, type: CommissionType, amount: number): Promise<ICommission[]>;
    getCommissionsByUserAndDateRangeAndStatusAndTypeAndAmountAndCurrency(userId: string, startDate: Date, endDate: Date, status: CommissionStatus, type: CommissionType, amount: number, currency: string): Promise<ICommission[]>;
    getCommissionsByDateRangeAndStatusAndTypeAndAmountAndCurrency(startDate: Date, endDate: Date, status: CommissionStatus, type: CommissionType, amount: number, currency: string): Promise<ICommission[]>;
    getCommissionsByStatusAndTypeAndAmountAndCurrency(status: CommissionStatus, type: CommissionType, amount: number, currency: string): Promise<ICommission[]>;
    getCommissionsByUserAndStatusAndTypeAndAmountAndCurrency(userId: string, status: CommissionStatus, type: CommissionType, amount: number, currency: string): Promise<ICommission[]>;
    getCommissionsByUserAndDateRangeAndStatusAndTypeAndAmountAndCurrencyAndDescription(userId: string, startDate: Date, endDate: Date, status: CommissionStatus, type: CommissionType, amount: number, currency: string, description: string): Promise<ICommission[]>;
    getCommissionsByDateRangeAndStatusAndTypeAndAmountAndCurrencyAndDescription(startDate: Date, endDate: Date, status: CommissionStatus, type: CommissionType, amount: number, currency: string, description: string): Promise<ICommission[]>;
    getCommissionsByStatusAndTypeAndAmountAndCurrencyAndDescription(status: CommissionStatus, type: CommissionType, amount: number, currency: string, description: string): Promise<ICommission[]>;
    getCommissionsByUserAndStatusAndTypeAndAmountAndCurrencyAndDescription(userId: string, status: CommissionStatus, type: CommissionType, amount: number, currency: string, description: string): Promise<ICommission[]>;
    getCommissionRules(): Promise<ICommissionRule[]>;
    createCommissionRule(data: Omit<ICommissionRule, '_id' | 'createdAt' | 'updatedAt'>): Promise<ICommissionRule>;
    updateCommissionRule(id: string, updateData: Partial<ICommissionRule>): Promise<ICommissionRule | null>;
    deleteCommissionRule(id: string): Promise<boolean>;
}
export declare const commissionService: CommissionService;
//# sourceMappingURL=CommissionService.d.ts.map